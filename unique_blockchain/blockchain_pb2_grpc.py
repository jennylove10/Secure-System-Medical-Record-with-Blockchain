# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import blockchain_pb2 as blockchain__pb2


class BlockchainStub(object):
    """blockchain service and the function definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startMining = channel.unary_unary(
                '/Blockchain/startMining',
                request_serializer=blockchain__pb2.startMiningRequest.SerializeToString,
                response_deserializer=blockchain__pb2.startMiningResponse.FromString,
                )
        self.diagnosis = channel.unary_unary(
                '/Blockchain/diagnosis',
                request_serializer=blockchain__pb2.diagnosisRequest.SerializeToString,
                response_deserializer=blockchain__pb2.diagnosisResponse.FromString,
                )
        self.diagnosis2 = channel.unary_unary(
                '/Blockchain/diagnosis2',
                request_serializer=blockchain__pb2.diagnosis2Request.SerializeToString,
                response_deserializer=blockchain__pb2.diagnosis2Response.FromString,
                )


class BlockchainServicer(object):
    """blockchain service and the function definition
    """

    def startMining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diagnosis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def diagnosis2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockchainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startMining': grpc.unary_unary_rpc_method_handler(
                    servicer.startMining,
                    request_deserializer=blockchain__pb2.startMiningRequest.FromString,
                    response_serializer=blockchain__pb2.startMiningResponse.SerializeToString,
            ),
            'diagnosis': grpc.unary_unary_rpc_method_handler(
                    servicer.diagnosis,
                    request_deserializer=blockchain__pb2.diagnosisRequest.FromString,
                    response_serializer=blockchain__pb2.diagnosisResponse.SerializeToString,
            ),
            'diagnosis2': grpc.unary_unary_rpc_method_handler(
                    servicer.diagnosis2,
                    request_deserializer=blockchain__pb2.diagnosis2Request.FromString,
                    response_serializer=blockchain__pb2.diagnosis2Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Blockchain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Blockchain(object):
    """blockchain service and the function definition
    """

    @staticmethod
    def startMining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Blockchain/startMining',
            blockchain__pb2.startMiningRequest.SerializeToString,
            blockchain__pb2.startMiningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def diagnosis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Blockchain/diagnosis',
            blockchain__pb2.diagnosisRequest.SerializeToString,
            blockchain__pb2.diagnosisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def diagnosis2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Blockchain/diagnosis2',
            blockchain__pb2.diagnosis2Request.SerializeToString,
            blockchain__pb2.diagnosis2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
